1. Count the customers with grades above Bangalore’s average. 
SELECT grade, COUNT (DISTINCT customer_id)
FROM customer
GROUP BY grade
HAVING grade > (SELECT AVG(grade)
FROM customer
WHERE city='BANGALORE');

////////////////////////////////////////////////////////


2. Find the name and numbers of all salesmen who had more than one customer.
select salesman_id, name
from salesman
where salesman_id in (select salesman_id from customer group by salesman_id having count (*) > 1);

////////////////////////////////////////////////////////

3. List all the salesmen and indicate those who have and don’t have customers in their cities (Use UNION 
operation.)
select salesman.salesman_id, name, cust_name,commission
from salesman, customer
where salesman.city = customer.city
UNION
select salesman_id, name, 'No Match',commission
from salesman
where city not in (select city from customer)
order by 2 desc;

//////////////////////////////////////////////////////


4. Create a view that finds the salesman who has the customer with the highest order of a day.
CREATE VIEW ELITSALESMAN AS
SELECT B.ord_date, A.salesman_id, A.name
FROM salesman A, orders B
WHERE A.salesman_id = B.salesman_id
AND B.purchase_amt=(SELECT MAX (purchase_amt)
FROM orders C
WHERE C.ord_date = B.ord_date);
View created.
select * from ELITSALESMAN;


///////////////////////////////////////////////////


5. Demonstrate the DELETE operation by removing salesman with id 12345. All his orders must also be deleted.
DELETE FROM salesman
WHERE salesman_id=1234;
SELECT * FROM salesman;


//////////////////////////////////////////////////

create table salesman(
salesman_id number(4) primary key,
name varchar(20),
city varchar(20),
commission varchar(5)
);
create table customer(
customer_id number(4) primary key,
cust_name varchar(20),
city varchar(20),
grade number(5),
salesman_id number(4),
foreign key (salesman_id) references salesman(salesman_id) on delete set null
);
create table orders(
ord_no number(4),
purchase_amt number(6,2),
ord_date date,
customer_id number(4),
salesman_id number(4),
foreign key (salesman_id) references salesman(salesman_id) on delete cascade,
foreign key (customer_id) references customer(customer_id) on delete cascade
);
INSERT INTO salesman VALUES (1000, 'JOHN','BANGALORE','25 %');
INSERT INTO salesman VALUES (2000, 'RAVI','BANGALORE','20 %');
INSERT INTO salesman VALUES (3000, 'KUMAR','MYSORE','15 %');
INSERT INTO salesman VALUES (4000, 'SMITH','DELHI','30 %');
INSERT INTO salesman VALUES (1234, 'HARSHA','HYDRABAD','15 %');
SELECT * FROM salesman;
INSERT INTO customer VALUES (10, 'PREETHI','BANGALORE', 100, 1000);
INSERT INTO customer VALUES (11, 'VIVEK','MANGALORE', 300, 1000);
INSERT INTO customer VALUES (12, 'BHASKAR','CHENNAI', 400, 2000);
INSERT INTO customer VALUES (13, 'CHETHAN','BANGALORE', 200, 2000);
INSERT INTO customer VALUES (14, 'MAMATHA','BANGALORE', 400, 3000);
INSERT INTO customer VALUES (15, 'RAKSHA','BANGALORE', 500, 1234);
SELECT * FROM customer;
INSERT INTO orders VALUES (50, 5000, '04-MAY-17', 10, 1000);
INSERT INTO orders VALUES (51, 450, '20-JAN-17', 10, 2000);
INSERT INTO orders VALUES (52, 1000, '24-FEB-17', 13, 2000);
INSERT INTO orders VALUES (53, 3500, '13-APR-17', 14, 3000);
INSERT INTO orders VALUES (54, 550, '09-MAR-17', 12, 2000);
INSERT INTO orders VALUES (55, 650, '19-MAR-17', 15, 1234);
SELECT * FROM orders;
